import net.nemerosa.versioning.ReleaseInfo

plugins {
    id 'java'
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id 'net.nemerosa.versioning' version '2.8.2'
}

group 'pl.fratik'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def jdaVersion = '4.2.1_276'

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
    maven { url 'https://m2.dv8tion.net/releases' }
}


dependencies {
    compile('net.dv8tion:JDA:' + jdaVersion) {
        exclude module: 'opus-java'
    }
    compile 'com.intellij:annotations:+@jar'
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.tuxdude.logback.extensions:logback-colorizer:1.0.1'
    compile 'com.google.guava:guava:21.0'
    compile 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.queer:async-postgres-jsonb-orm:e348e109f8'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

versioning {
    /**
     * Defines the SCM to use in order to collect information.
     *
     * At the moment, only Git (git) and Subversion (svn) are supported.
     */
    scm = 'git'
    /**
     * Computation of the release type and the base, by parsing the scm info.
     * By default, we use "/" as a separator in branch name between the type and the base. If not
     * present, the type is the branch and the base is empty.
     * F.e. if you want use tag name instead of branch you may provide something like:
     */
    releaseParser = { scmInfo, separator = '/' ->
        List<String> part
        if (scmInfo.tag) part = scmInfo.tag.split('/') + ''
        else part = scmInfo.branch.split('/', 2) + ''
        new ReleaseInfo(type: part[0], base: part[1])
    }
    /**
     * Fetch branch name from environment variables. Useful when using CI like
     * Travis or Jenkins.
     */
    branchEnv = ['TRAVIS_BRANCH', 'GIT_BRANCH', 'SVN_BRANCH', 'BRANCH_NAME']

    /**
     * Computation of the full version
     */
    full = { scmInfo ->
        if (scmInfo.tag) {
            return "${scmInfo.tag}"
        } else {
            return "${scmInfo.branch}-${scmInfo.abbreviated}"
        } }

    dirty = { version -> "${version}${dirtySuffix}" }

    /**
     * Set of eligible branch types for computing a display version from the branch base name
     */
    releases = ['release']
    /**
     * Pattern used to match when looking for the last tag. By default, checks for any
     * tag having a last part being numeric. At least one numeric grouping
     * expression is required. The first one will be used to reverse order
     * the tags in Git.
     */
    lastTagPattern = /v(\d+).(\d+).(\d+)$/
}

version versioning.info.full

compileJava {
    options.compilerArgs << '-parameters' // reflection fix
}

shadowJar {
    manifest {
        attributes 'Implementation-Title': 'FratikDev', 'Implementation-Version': version
        attributes 'Main-Class': 'pl.fratik.FratikDev.Main'
    }
}


compileJava.options.encoding = 'UTF-8'
